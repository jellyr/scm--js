(define (but-last l)
  (if (null? l)
      '()
      (if (null? (cdr l))
	  '()
	  (cons (car l) (but-last (cdr l))))))

(define (last l)
  (if (null? l)
      #f
      (if (null? (cdr l))
	  (car l)
	  (last (cdr l)))))

(define (kind-of-expression? kind args exp)
  (and (list? exp) (eq? kind (car exp))
       (cond ((number? args) (= (+ 1 args) (length exp)))
	     ((eq? 'even args) (even? (length (cdr exp))))
	     ((eq? 'one+ args) (not (null? (cdr exp)))))))

(define (cons-expression? exp) (kind-of-expression? 'cons 2 exp))
(define (car-expression? exp) (kind-of-expression? 'car 1 exp))
(define (cdr-expression? exp) (kind-of-expression? 'cdr 1 exp))
(define (if-expression? exp) (kind-of-expression? 'if 3 exp))
(define (lambda-expression? exp)
  (and (list? exp) (eq? (car exp) 'lambda) (list? (cadr exp)) (list? (cddr exp))))
(define (begin-expression? exp) (kind-of-expression? 'begin 'one+ exp))
(define (define-expression? exp) (kind-of-expression? 'define 'one+ exp))

(define (runtime-primitive? op)
  (cond ((eq? op '+) 'js-plus)
	((eq? op '-) 'js-minus)
	((eq? op '*) 'js-times)
	((eq? op 'runtime-booleanize) 'runtime-booleanize)
	(else #f)))

(define (scm-top->js scm)
  (cond ((define-expression? scm)
         (if (symbol? (cadr scm))
             `(js-declare-var ,(cadr scm) ,(caddr scm))
             `(js-named-function
               ,(caadr scm)
               ,(cdadr scm)
               . ,(append (map scm->js (but-last (cddr scm)))
                          (list `(js-return ,(scm->js (last (cddr scm)))))))))
        (else (scm->js scm))))

(define (scm->js scm)
  (cond ((null? scm) scm)
	((number? scm) scm)
	((string? scm) scm)
	((boolean? scm) scm)
        ((symbol? scm) `(js-var ,scm))
	((cons-expression? scm) `(js-object-literal car ,(scm->js (cadr scm))
						    cdr ,(scm->js (caddr scm))))
	((car-expression? scm) `(js-dot car ,(scm->js (cadr scm))))
	((cdr-expression? scm) `(js-dot cdr ,(scm->js (cadr scm))))
        ((lambda-expression? scm)
         `(js-function
           ,(cadr scm)
           . ,(append (map scm->js (but-last (cddr scm)))
                          (list `(js-return ,(scm->js (last (cddr scm))))))))

	((if-expression? scm) `(js-if (js-funcall runtime-booleanize ,(scm->js (cadr scm)))
				      ,(scm->js (caddr scm))
				      ,(scm->js (cadddr scm))))
        ((begin-expression? scm)
	 (scm->js `((lambda () . ,(cdr scm)))))

	((and (list? scm) (runtime-primitive? (car scm)))
	 `(js-funcall ,(runtime-primitive? (car scm)) . ,(map scm->js (cdr scm))))

        ((list? scm)
         `(js-funcall* ,(scm->js (car scm)) . ,(map scm->js (cdr scm))))

	))

(define (js-object-literal? js) (kind-of-expression? 'js-object-literal 'even js))
(define (js-dot? js) (kind-of-expression? 'js-dot 2 js))
(define (js-funcall*? js) (kind-of-expression? 'js-funcall* 'one+ js))
(define (js-funcall? js) (kind-of-expression? 'js-funcall 'one+ js))
(define (js-if? js) (kind-of-expression? 'js-if 3 js))
(define (js-function? js) (kind-of-expression? 'js-function 'one+ js))
(define (js-return? js) (kind-of-expression? 'js-return 1 js))
(define (js-var? js) (kind-of-expression? 'js-var 1 js))
(define (js-named-function? js) (kind-of-expression? 'js-named-function 'one+ js))

(define (mangle-name name)
  (string->symbol (list->string (mangle-helper (string->list (symbol->string name))))))
(define (mangle-helper n)
  (if (null? n)
      '()
      (cond ((eq? #\- (car n))
	     (append (string->list "_dash_") (mangle-helper (cdr n))))
	    ((eq? #\? (car n))
	     (append (string->list "_huh_") (mangle-helper (cdr n))))
	    ((eq? #\_ (car n))
	     (append (string->list "_underscore_") (mangle-helper (cdr n))))
	    (else
	     (cons (car n) (mangle-helper (cdr n)))))))

(define (js->javascript js)
  (cond ((null? js) (display "null"))
	((number? js) (write js))
	((string? js) (write js))
	((eq? #t js) (display "true"))
	((eq? #f js) (display "false"))
	((js-object-literal? js)
	 (display "{")
	 (do-js-object-literal (cdr js))
	 (display "}"))
        ((js-var? js)
         (display (mangle-name (cadr js))))
	((js-dot? js)
	 (display "(")
	 (js->javascript (caddr js))
	 (display ")")
	 (display ".")
	 (display (cadr js)))
        ((js-return? js)
         (display "return ")
         (js->javascript (cadr js)))
	((js-funcall*? js)
         (display "(")
	 (js->javascript (cadr js))
         (display ")")
	 (display "(")
	 (do-js-funcall (cddr js))
	 (display ")"))
	((js-funcall? js)
	 (display (mangle-name (cadr js)))
	 (display "(")
	 (do-js-funcall (cddr js))
	 (display ")"))
	((js-if? js)
	 (display "(")
	 (js->javascript (cadr js))
	 (display ")")
	 (display "?")
	 (display "(")
	 (js->javascript (caddr js))
	 (display ")")
	 (display ":")
	 (display "(")
	 (js->javascript (cadddr js))
	 (display ")"))
        ((js-function? js)
         (display "function")
         (display "(")
         (do-js-funargs (cadr js))
         (display ")")
         (display "{")
         (do-js-sequence (cddr js))
         (display "}"))
        ((js-named-function? js)
         (display "function ")
         (display (mangle-name (cadr js)))
         (display "(")
         (do-js-funargs (caddr js))
         (display ")")
         (display "{")
         (do-js-sequence (cdddr js))
         (display "}"))))

(define (do-js-object-literal kvs)
  (if (null? kvs)
      0
      (begin
	(display (mangle-name (car kvs)))
	(display ":")
	(js->javascript (cadr kvs))
	(if (null? (cddr kvs))
	    0
	    (begin
	      (display ", ")
	      (do-js-object-literal (cddr kvs)))))))

(define (do-js-funcall kvs)
  (if (null? kvs)
      0
      (begin
	(js->javascript (car kvs))
	(if (null? (cdr kvs))
	    0
	    (begin
	      (display ", ")
	      (do-js-funcall (cdr kvs)))))))

(define (do-js-funargs kvs)
  (if (null? kvs)
      0
      (begin
        (display (mangle-name (car kvs)))
	(if (null? (cdr kvs))
	    0
	    (begin
	      (display ", ")
	      (do-js-funargs (cdr kvs)))))))

(define (do-js-sequence exps)
  (if (null? exps)
      0
      (begin
        (js->javascript (car exps))
	(if (null? (cdr exps))
	    0
	    (begin
	      (display "; ")
	      (do-js-sequence (cdr exps)))))))


(define t1 '42)
(define t2 '(car (cons 4 2)))
(define t3 '(cdr (cons 4 2)))
(define t4 '(+ (car (cons 4 2)) (cdr (cons 4 2))))
(define t5 '(- (+ 42 (* 3 6)) 7))
(define t6 '(if #t "yes" "no"))
(define t7 '(if #f "yes" "no"))
(define t8 '(if "huh?" "yes" "no"))
(define t9 '(+ 1 (if #t 4 2)))
(define t10 '(if #t car cdr))
(define t11 '(lambda (x) x))
(define t12 '((lambda (x) x) 1))
(define t13 '(begin 1 2 3 (begin 4 5 6)))
(define t14 '((if #t car cdr) (cons 4 2)))
(define t15 '(last (cons 4 (cons 1 (cons 2 ())))))

(define (go t) (js->javascript (scm->js t)) (newline))

(define tests (list t1 t2 t3 t4 t5 t6 t7 t8 t9 t10 t11 t12 t13 t14 t15))

(define (run)
  (for-each (lambda (t)
	      (display "document.write(")
	      (write (with-output-to-string (lambda () (write t))))
	      (display "+\": \"+")
	      (newline)
	      (go t)
	      (display "+\"<br/>\");")
	      (newline) (newline)) tests))

;(define t15 '((define (x y) y) (x 1)))
(define (go-top t)
  (for-each (lambda (t) (js->javascript (scm-top->js t)) (display ";") (newline)) t)
  (newline))
