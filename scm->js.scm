(define (but-last l)
  (if (null? l)
      '()
      (if (null? (cdr l))
	  '()
	  (cons (car l) (but-last (cdr l))))))

(define (last l)
  (if (null? l)
      #f
      (if (null? (cdr l))
	  (car l)
	  (last (cdr l)))))

(define (kind-of-expression? kind args exp)
  (and (list? exp) (not (null? exp)) (eq? kind (car exp))
       (cond ((number? args) (= (+ 1 args) (length exp)))
	     ((eq? 'even args) (even? (length (cdr exp))))
	     ((eq? 'one+ args) (not (null? (cdr exp))))
             (else #f))))

(define (if-expression? exp) (kind-of-expression? 'if 3 exp))
(define (lambda-expression? exp)
  (and (list? exp) (eq? (car exp) 'lambda) (list? (cadr exp)) (list? (cddr exp))))
(define (begin-expression? exp) (kind-of-expression? 'begin 'one+ exp))
(define (define-expression? exp) (kind-of-expression? 'define 'one+ exp))
(define (quote-expression? exp) (kind-of-expression? 'quote 1 exp))
(define (quasiquote-expression? exp) (kind-of-expression? 'quasiquote 1 exp))
(define (unquote-expression? exp) (kind-of-expression? 'unquote 1 exp))
(define (cond-expression? exp) (and (list? exp) (eq? 'cond (car exp))))
(define (or-expression? exp) (kind-of-expression? 'or 'one+ exp))
(define (and-expression? exp) (kind-of-expression? 'and 'one+ exp))

(define (runtime-primitive? op)
  (cond ((eq? op '+) 'js-plus)
	((eq? op '-) 'js-minus)
	((eq? op '*) 'js-times)
	((eq? op 'runtime-booleanize) 'runtime-booleanize)
	(else #f)))

(define (scm-top->js scm)
  (cond ((define-expression? scm)
         (if (symbol? (cadr scm))
             `(js-declare-var ,(cadr scm) ,(caddr scm))
             `(js-named-function
               ,(caadr scm)
               ,(cdadr scm)
               . ,(append (map scm->js (but-last (cddr scm)))
                          (list `(js-return ,(scm->js (last (cddr scm)))))))))
        (else (scm->js scm))))

(define (scm->js scm)
  (cond ((null? scm) scm)
	((number? scm) scm)
	((string? scm) scm)
	((char? scm) scm)
	((boolean? scm) scm)
        ((symbol? scm) `(js-var ,scm))
	((quote-expression? scm) (quoted->js (cadr scm)))
	((quasiquote-expression? scm) (scm->js (quasiquoted->js (cadr scm) 1)))
        ((cond-expression? scm) (cond->js scm))
        ((lambda-expression? scm)
         `(js-function
           ,(cadr scm)
           . ,(append (map scm->js (but-last (cddr scm)))
                          (list `(js-return ,(scm->js (last (cddr scm))))))))

	((if-expression? scm) `(js-if (js-funcall runtime-booleanize ,(scm->js (cadr scm)))
				      ,(scm->js (caddr scm))
				      ,(scm->js (cadddr scm))))
	((or-expression? scm) (scm->js (or-expression->if (cdr scm))))
	((and-expression? scm) (scm->js (and-expression->if (cdr scm))))
        ((begin-expression? scm)
	 (scm->js `((lambda () . ,(cdr scm)))))

	((and (pair? scm) (runtime-primitive? (car scm)))
	 `(js-funcall ,(runtime-primitive? (car scm)) . ,(map scm->js (cdr scm))))

        ((list? scm)
         `(js-funcall* ,(scm->js (car scm)) . ,(map scm->js (cdr scm))))

        (else (error "unkown exp in cond->js"))

	))

(define (or-expression->if exp)
  (if (null? exp)
      #f
      `(if ,(car exp)
	   #t
	   ,(or-expression->if (cdr exp)))))

(define (and-expression->if exp)
  (if (null? exp)
      #t
      `(if ,(car exp)
	   ,(and-expression->if (cdr exp))
	   #f)))

(define (quoted->js exp)
  (cond ((number? exp) exp)
	((string? exp) exp)
	((char? exp) exp)
	((boolean? exp) exp)
	((null? exp) exp)
	((symbol? exp) (scm->js `(string->symbol ,(symbol->string exp))))
	((pair? exp)
	 `(js-funcall cons ,(quoted->js (car exp))
                      ,(quoted->js (cdr exp))))
        (else (error "unkown exp in cond->js"))))

(define (quasiquoted->js term n)
  (cond
   ((unquote-expression? term)
    (if (= n 1)
        (cadr term)
        (list 'cons ''unquote (list 'cons (quasiquoted->js (cadr term) (- n 1)) ''()))))
   ((quasiquote-expression? term)
    `(cons 'quasiquote (cons ,(quasiquoted->js (cadr term) (+ n 1)) ())))
   ((pair? term)
    `(cons ,(quasiquoted->js (car term) n)
           ,(quasiquoted->js (cdr term) n)))
   (else `(quote ,term))))

(define (cond->js scm)
  (cond
   ;; (cond)
   ((null? (cdr scm)) '())
   ;; (cond (els b))
   ((and (equal? 'else (caadr scm))
         (= 2 (length scm)))
    (scm->js (cons 'begin (cdadr scm))))
   ;; (cond (a b))
   ((= 2 (length scm))
    (scm->js `(if ,(caadr scm)
                  ,(cons 'begin (cdadr scm))
                  '())))
   ;; (coond (a b) rest ...)
   ((> (length scm) 2)
    (scm->js `(if ,(caadr scm)
                  ,(cons 'begin (cdadr scm))
                  (cond . ,(cddr scm)))))
   (else (error "unkown exp in cond->js"))))

(define (js-object-literal? js) (kind-of-expression? 'js-object-literal 'even js))
(define (js-dot? js) (kind-of-expression? 'js-dot 2 js))
(define (js-funcall*? js) (kind-of-expression? 'js-funcall* 'one+ js))
(define (js-funcall? js) (kind-of-expression? 'js-funcall 'one+ js))
(define (js-if? js) (kind-of-expression? 'js-if 3 js))
(define (js-function? js) (kind-of-expression? 'js-function 'one+ js))
(define (js-return? js) (kind-of-expression? 'js-return 1 js))
(define (js-var? js) (kind-of-expression? 'js-var 1 js))
(define (js-named-function? js) (kind-of-expression? 'js-named-function 'one+ js))

(define (mangle-name name)
  (string->symbol (list->string (mangle-helper (string->list (symbol->string name))))))
(define (mangle-helper n)
  (if (null? n)
      '()
      (cond ((eq? #\- (car n))
	     (append (string->list "_dash_") (mangle-helper (cdr n))))
	    ((eq? #\? (car n))
	     (append (string->list "_huh_") (mangle-helper (cdr n))))
	    ((eq? #\_ (car n))
	     (append (string->list "_underscore_") (mangle-helper (cdr n))))
            ((eq? #\> (car n))
             (append (string->list "_gt_") (mangle-helper (cdr n))))
            ((eq? #\! (car n))
             (append (string->list "_bang_") (mangle-helper (cdr n))))
            ((eq? #\= (car n))
             (append (string->list "_eq_") (mangle-helper (cdr n))))
            ((eq? #\* (car n))
             (append (string->list "_star_") (mangle-helper (cdr n))))
	    (else
	     (cons (car n) (mangle-helper (cdr n)))))))

(define (js->javascript js)
  (cond ((null? js) (display "null"))
	((number? js) (write js))
	((string? js) (write js))
	((char? js) (write (list->string (list js))))
	((eq? #t js) (display "true"))
	((eq? #f js) (display "false"))
	((js-object-literal? js)
	 (display "{")
	 (do-js-object-literal (cdr js))
	 (display "}"))
        ((js-var? js)
         (display (mangle-name (cadr js))))
	((js-dot? js)
	 (display "(")
	 (js->javascript (caddr js))
	 (display ")")
	 (display ".")
	 (display (cadr js)))
        ((js-return? js)
         (display "return ")
         (js->javascript (cadr js)))
	((js-funcall*? js)
         (display "(")
	 (js->javascript (cadr js))
         (display ")")
	 (display "(")
	 (do-js-funcall (cddr js))
	 (display ")"))
	((js-funcall? js)
	 (display (mangle-name (cadr js)))
	 (display "(")
	 (do-js-funcall (cddr js))
	 (display ")"))
	((js-if? js)
	 (display "(")
	 (js->javascript (cadr js))
	 (display ")")
	 (display "?")
	 (display "(")
	 (js->javascript (caddr js))
	 (display ")")
	 (display ":")
	 (display "(")
	 (js->javascript (cadddr js))
	 (display ")"))
        ((js-function? js)
         (display "function")
         (display "(")
         (do-js-funargs (cadr js))
         (display ")")
         (display "{")
         (do-js-sequence (cddr js))
         (display "}"))
        ((js-named-function? js)
         (display "function ")
         (display (mangle-name (cadr js)))
         (display "(")
         (do-js-funargs (caddr js))
         (display ")")
         (display "{")
         (do-js-sequence (cdddr js))
         (display "}"))
        (else (error "unkown exp in cond->js"))))

(define (do-js-object-literal kvs)
  (if (null? kvs)
      0
      (begin
	(display (mangle-name (car kvs)))
	(display ":")
	(js->javascript (cadr kvs))
	(if (null? (cddr kvs))
	    0
	    (begin
	      (display ", ")
	      (do-js-object-literal (cddr kvs)))))))

(define (do-js-funcall kvs)
  (if (null? kvs)
      0
      (begin
	(js->javascript (car kvs))
	(if (null? (cdr kvs))
	    0
	    (begin
	      (display ", ")
	      (do-js-funcall (cdr kvs)))))))

(define (do-js-funargs kvs)
  (if (null? kvs)
      0
      (begin
        (display (mangle-name (car kvs)))
	(if (null? (cdr kvs))
	    0
	    (begin
	      (display ", ")
	      (do-js-funargs (cdr kvs)))))))

(define (do-js-sequence exps)
  (if (null? exps)
      0
      (begin
        (js->javascript (car exps))
	(if (null? (cdr exps))
	    0
	    (begin
	      (display "; ")
	      (do-js-sequence (cdr exps)))))))

